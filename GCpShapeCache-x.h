//
//  Loads physics sprites created with http://www.PhysicsEditor.de
//
//  Generic Shape Cache for Chipmunk
//

#ifndef __GCpShapeCache_x_H__
#define __GCpShapeCache_x_H__

#include "cocos2d.h"
#include "chipmunk.h"

class BodyDef;

USING_NS_CC;

namespace gcp {
    /**
     * The class used for loading physics body details from a *.plist generated by
     * PhysicsEditor and storing them in a cache for later generating bodies
     */
    class GCpShapeCache
    {
    public:
        /**
         * Static interface
         */
        static GCpShapeCache *getInstance();
        
    public:
        GCpShapeCache();
        ~GCpShapeCache();
        
        /**
         * Load shapes stored in the plist specified
         * @param plist the filename of the plist
         */
        bool addShapesWithFile(std::string plist);
        
        /**
         * Add fixtures for the specified shape to the given body
         * @param name the body name
         */
        PhysicsBody *createPhysicsBodyWithName(std::string name);
        
        /**
         * Returns the anchor point for the shape with the name given
         * @param name the name of the body
         * @return the anchor point
         */
        Point getAnchorPointForName(std::string name);
        
        /**
         * Returns the body objects name
         * @return the body objects name
         */
        std::vector<std::string> getBodiesName();
        
        /**
         * Returns the shapes with the name given
         * @param name the name of the body
         * @return the shapes
         */
        std::vector<PhysicsShape *> getShapesOfBodyWithName(std::string name);
    private:
        /**
         * the map of body objects loaded from the plist
         */
        std::map<std::string, BodyDef *> bodyDefs;
        
        /**
         * Gets the string to point
         * @return the string to point
         */
        static Point getPointFromString(std::string str);
    };
}
#endif
